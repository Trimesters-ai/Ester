import React, { useState, useRef, useEffect } from 'react';
import { Send, Loader2, MessageCircle } from 'lucide-react';
import { useStore } from '../store/useStore';
import { getTimeAgo } from '../utils/timeAgo';
import ReactMarkdown from 'react-markdown';
import { streamOpenAIChat } from '../utils/openai';

const CONVERSATION_STARTERS = [
  "How does my sleep quality affect my postpartum recovery?",
  "What does my recovery score mean for breastfeeding?",
  "Should I start exercising based on my current strain?",
  "Is my heart rate variability normal for postpartum?",
  "How can I improve my sleep while caring for my baby?"
];

export const ChatInterface = () => {
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { messages, addMessage, user } = useStore();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const [showStarters, setShowStarters] = useState(true);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
    inputRef.current?.focus();
  }, [messages]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || !user) return;

    setShowStarters(false);
    const userMessage = {
      id: crypto.randomUUID(),
      content: input,
      timestamp: new Date().toISOString(),
      userId: user.id,
      isAI: false,
    };

    addMessage(userMessage);
    setInput('');
    setIsLoading(true);
    setTimeout(() => {
      inputRef.current?.focus();
    }, 10);

    try {
      // Add a placeholder AI message to stream into
      const aiMessageId = crypto.randomUUID();
      addMessage({
        id: aiMessageId,
        content: '',
        timestamp: new Date().toISOString(),
        userId: user.id,
        isAI: true,
      });

      // Process the chat stream
      const prevMessages = [...messages, userMessage];
      let aiContent = '';
      const stream = await streamOpenAIChat({ messages: prevMessages });
      for await (const chunk of stream) {
        aiContent += chunk;
        // Update the last AI message with the streamed content
        // eslint-disable-next-line no-loop-func
        useStore.getState().setMessages([
          ...prevMessages,
          { id: aiMessageId, content: aiContent, timestamp: new Date().toISOString(), userId: user.id, isAI: true }
        ]);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Error sending message:', error);
      setIsLoading(false);
    }
  };

  const handleStarterClick = (starter: string) => {
    setInput(starter);
    setShowStarters(false);
  };

  return (
    <div className="flex flex-col items-center justify-center w-[95vw] mx-auto h-[100vh] min-h-[100vh]">
      <div className="flex flex-col flex-1 w-full max-w-3xl bg-white rounded-lg shadow-lg overflow-hidden relative">
        <div className="flex-1 overflow-y-auto p-4 space-y-4" style={{ paddingBottom: '90px' }}>
          {messages.length === 0 && showStarters && (
            <div className="space-y-4">
              <div className="flex items-center space-x-2 text-purple-900">
                <MessageCircle className="w-5 h-5" />
                <h3 className="font-semibold">Suggested Questions</h3>
              </div>
              <div className="grid gap-2 md:grid-cols-2">
                {CONVERSATION_STARTERS.map((starter, index) => (
                  <button
                    key={index}
                    onClick={() => handleStarterClick(starter)}
                    className="text-left p-3 bg-purple-50 hover:bg-purple-100 rounded-lg text-sm text-purple-900 transition-colors duration-200 ease-in-out transform hover:scale-[1.02]"
                  >
                    {starter}
                  </button>
                ))}
              </div>
            </div>
          )}
          
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${
                message.isAI ? 'justify-start' : 'justify-end'
              } animate-fade-in`}
            >
              <div
                className={`max-w-[80%] rounded-lg p-3 shadow-sm transform transition-all duration-200 hover:scale-[1.01] ${
                  message.isAI
                    ? 'bg-purple-100 text-purple-900'
                    : 'bg-blue-100 text-blue-900'
                }`}
              >
                {message.isAI ? (
                  <ReactMarkdown className="prose prose-sm max-w-none text-purple-900">{message.content}</ReactMarkdown>
                ) : (
                  <p className="text-sm leading-relaxed">{message.content}</p>
                )}
                <p className="text-xs mt-1 opacity-70">
                  {getTimeAgo(message.timestamp)}
                </p>
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        <form
          onSubmit={handleSubmit}
          className="fixed bottom-0 left-0 w-full flex justify-center z-20"
          style={{ background: 'rgba(243, 244, 246, 0.95)', boxShadow: '0 -2px 8px rgba(0,0,0,0.03)' }}
        >
          <div className="flex items-center space-x-2 w-full max-w-3xl p-4">
            <input
              ref={inputRef}
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Type your message..."
              className="flex-1 rounded-full px-4 py-2 border focus:outline-none focus:ring-2 focus:ring-purple-300 transition-all duration-200"
              disabled={isLoading}
              autoFocus
            />
            <button
              type="submit"
              disabled={isLoading || !input.trim()}
              className="bg-purple-600 text-white rounded-full p-2 hover:bg-purple-700 disabled:opacity-50 transition-colors duration-200 hover:shadow-md"
            >
              {isLoading ? (
                <Loader2 className="w-5 h-5 animate-spin" />
              ) : (
                <Send className="w-5 h-5" />
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};
